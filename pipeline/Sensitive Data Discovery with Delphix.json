{
	"name": "Sensitive Data Discovery with Delphix",
	"properties": {
		"description": "Use this template to configure a Delphix Continuous Compliance Engine with what it requires to run sensitive data discovery, also known as Profiling.\n\nProfiling is the process that identifies columns that may contain sensitive data and assigns appropriate algorithms to mask this data. The delivery of on-demand, compliant data from multiple data sources is a challenge that every enterprise faces today. Identifying where sensitive data resides is a crucial part of this challenge, and is addressed by this template.\n\nIt is recommended that this template be run to identify sensitive data, prior to running the Delphix Continuous Compliance Masking template to mask the sensitive data.\n\nNote: A purchase of Delphix Continuous Compliance (Azure Marketplace) is required to use this template. To receive Delphix support, please register your engine at https://support-register.delphix.com",
		"activities": [
			{
				"name": "List All Tables",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@pipeline().parameters.QueryToGetTableSchema",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ConnectToSourceData",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "*",
							"TableSchema": "*"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Copy Table Schema to Blob Storage",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Check Schema Directory",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('List All Tables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy Table schema",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Append schemaName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 1,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT TOP 1 * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ConnectToSourceData",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "@item().TABLE_NAME",
										"TableSchema": "@item().TABLE_SCHEMA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "rootDataSetRowHeader",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/schemafile",
										"fileName": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv"
									}
								}
							]
						},
						{
							"name": "Creates empty files in the Target Fileshare",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Copy Schema to BackupDir",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 1,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}] where 1=2",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureFileStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ConnectToSourceData",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "@item().TABLE_NAME",
										"TableSchema": "@item().TABLE_SCHEMA"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ConnectToTargetFileShare",
									"type": "DatasetReference",
									"parameters": {
										"DirectoryName": {
											"value": "@concat(pipeline().parameters.FileShareRootFolder,'/Target')",
											"type": "Expression"
										},
										"FileName": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv"
									}
								}
							]
						},
						{
							"name": "Append schemaName",
							"type": "AppendVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "schemaName",
								"value": {
									"value": "@item().TABLE_SCHEMA",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Creates empty files in the Source Fileshare",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Creates empty files in the Target Fileshare",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 1,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureFileStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureFileStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ConnectToTargetFileShare",
									"type": "DatasetReference",
									"parameters": {
										"DirectoryName": {
											"value": "@concat(pipeline().parameters.FileShareRootFolder,'/Target')",
											"type": "Expression"
										},
										"FileName": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ConnectToTargetFileShare",
									"type": "DatasetReference",
									"parameters": {
										"DirectoryName": {
											"value": "@concat(pipeline().parameters.FileShareRootFolder,'/Source')",
											"type": "Expression"
										},
										"FileName": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv"
									}
								}
							]
						},
						{
							"name": "Copy Schema to BackupDir",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Copy Table schema",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "rootDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/schemafile",
										"fileName": {
											"value": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "rootDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/BkpSchemafile",
										"fileName": {
											"value": "@{item().TABLE_SCHEMA}.@{item().TABLE_NAME}.csv",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Delphix Login",
				"description": "API login to Delphix Compliance Engine",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get Compliance Engine Password",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('http://',pipeline().parameters.MaskingEngineIP,'/masking/api/v5.1.11/login')",
						"type": "Expression"
					},
					"method": "POST",
					"headers": {
						"Content-Type": "application/json",
						"Accept": "application/json"
					},
					"body": {
						"value": "{\"username\":\"@{activity('Get Compliance Engine User').output.value}\",\"password\":\"@{activity('Get Compliance Engine Password').output.value}\"}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Upload fileformats",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Delphix Login",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Check if current file format was uploaded",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('FileToBeUploaded')",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get Contents of fileformat File",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"dataset": {
									"referenceName": "fileFormatDataSetPiped",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"fileName": "@item()",
										"directoryName": "current-fileformat/fileformat"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "POST fileFormat using LogicApp",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Get fileformat File Data",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "AppendFileName with PipelineRunID",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@pipeline().parameters.LogicappURL",
									"type": "Expression"
								},
								"method": "POST",
								"body": {
									"value": "{\n    \"Authorization\": \"@{activity('Delphix Login').output.Authorization}\",\n    \"fileFormat\" : \"@{variables('FileContents')}\",\n    \"fileFormatType\" : \"DELIMITED\",\n    \"fileName\": \"@{variables('FileNamewithPipelineId')}\",\n    \"maskingEngineIp\": \"@{pipeline().parameters.MaskingEngineIP}\"\n}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get fileformat File Data",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Contents of fileformat File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "FileContents",
								"value": {
									"value": "@activity('Get Contents of fileformat File').output.value[0].Prop_0",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get PipelineRunID",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineRunId",
								"value": {
									"value": "@split(pipeline().RunId, '-')[0]",
									"type": "Expression"
								}
							}
						},
						{
							"name": "AppendFileName with PipelineRunID",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get PipelineRunID",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "FileNamewithPipelineId",
								"value": {
									"value": "@concat(item(),'_',variables('PipelineRunId'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Clean-up FileFormats",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "POST fileFormat using LogicApp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Clean File Formats",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"FilenameToClean": {
										"value": "@item()",
										"type": "Expression"
									},
									"MaskingEngineIP": {
										"value": "@pipeline().parameters.MaskingEngineIP",
										"type": "Expression"
									},
									"LogicappURL": {
										"value": "@pipeline().parameters.LogicappURL",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"authkey": {
										"value": "@activity('Delphix Login').output.Authorization",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Copy files to uploaded file Format",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "POST fileFormat using LogicApp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "fileFormatDataSetPiped",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"fileName": "@item()",
										"directoryName": "current-fileformat/fileformat"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "fileFormatDataSetPiped",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"fileName": "@item()",
										"directoryName": "uploaded-fileformat/fileformat"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Get Compliance Engine User",
				"description": "This web activity gets the Compliance engine username from the Key Vault.",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Copy Data to File Format Directory",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.VaultURLForUsername",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get Compliance Engine Password",
				"description": "This web activity gets the Compliance engine Password from the Key Vault.",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get Compliance Engine User",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().parameters.VaultURLForPassword",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Check if current file format was uploaded",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter already uploaded files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter already uploaded files').output.Value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Append if fileFormat has changed",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup in uploaded file format",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(equals(activity('Lookup in current file format').output.value,activity('Lookup in uploaded file format').output.value)),contains(variables('schemaName'),variables('currentSchema')))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Append to file to be uploaded",
										"description": "",
										"type": "AppendVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "FileToBeUploaded",
											"value": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Lookup in current file format",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Set currentSchema",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"dataset": {
									"referenceName": "fileFormatDataSetPiped",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"fileName": "@item().name",
										"directoryName": "current-fileformat/fileformat"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Lookup in uploaded file format",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Lookup in current file format",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"dataset": {
									"referenceName": "fileFormatDataSetPiped",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"fileName": "@item().name",
										"directoryName": "uploaded-fileformat/fileformat"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Set currentSchema",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "currentSchema",
								"value": {
									"value": "@split(item().name,'.')[0]",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Get Source File List",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Setup folder structure",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "scehmaFileDataSetColumnDelim",
						"type": "DatasetReference",
						"parameters": {
							"containerName": "@pipeline().parameters.ContainerRootFolder",
							"fileName": "*"
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Copy Data to File Format Directory",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Source File List",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Source File List').output.childItems",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Contents of current file format",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"dataset": {
									"referenceName": "semicolonDataSetDefaultRow",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/schemafile",
										"fileName": "@item().name"
									}
								}
							}
						},
						{
							"name": "Copy fileFormat to output directory",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Contents of current file format",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "NAME",
											"value": {
												"value": "@activity('Contents of current file format').output.firstRow.Prop_0",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "NAME",
												"type": "String"
											},
											"sink": {
												"ordinal": 1
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "noescapeDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/Empty",
										"fileName": "Empty.csv"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "noescapeDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/Output",
										"fileName": "@item().name"
									}
								}
							]
						},
						{
							"name": "Copy to file format directory",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Copy fileFormat to output directory",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "semicolonDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/Output",
										"fileName": "@item().name"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "noescapeDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/fileformat",
										"fileName": "@item().name"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Setup Masking Engine",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Delphix Login",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Setup Source Connector and Ruleset",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"FileShareUserName": {
							"value": "@pipeline().parameters.FileShareUserName",
							"type": "Expression"
						},
						"FileSharePassword": {
							"value": "@pipeline().parameters.FileSharePassword",
							"type": "Expression"
						},
						"FileShareMountPointName": {
							"value": "@pipeline().parameters.FileShareMountPointName",
							"type": "Expression"
						},
						"FileShareUrl": {
							"value": "@pipeline().parameters.FileShareUrl",
							"type": "Expression"
						},
						"FileShareName": {
							"value": "@pipeline().parameters.FileShareName",
							"type": "Expression"
						},
						"ApplicationName": {
							"value": "@pipeline().parameters.ApplicationName",
							"type": "Expression"
						},
						"MaskingEngineIP": {
							"value": "@pipeline().parameters.MaskingEngineIP",
							"type": "Expression"
						},
						"AuthKey": {
							"value": "@activity('Delphix Login').output.Authorization",
							"type": "Expression"
						},
						"SourceEnvironmentName": {
							"value": "@pipeline().parameters.SourceEnvironmentName",
							"type": "Expression"
						},
						"TargetEnvironmentName": {
							"value": "@pipeline().parameters.TargetEnvironmentName",
							"type": "Expression"
						},
						"SourceConnectorName": {
							"value": "@pipeline().parameters.SourceConnectorName",
							"type": "Expression"
						},
						"TargetConnectorName": {
							"value": "@pipeline().parameters.TargetConnectorName",
							"type": "Expression"
						},
						"SourceRulesetName": {
							"value": "@pipeline().parameters.SourceRulesetName",
							"type": "Expression"
						},
						"TargetRulesetName": {
							"value": "@pipeline().parameters.TargetRulesetName",
							"type": "Expression"
						},
						"RootFolder": {
							"value": "@pipeline().parameters.fileShareRootFolder",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get Source Metadata",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Copy Data to File Format Directory",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "fileFormatDataSetPiped",
						"type": "DatasetReference",
						"parameters": {
							"containerName": {
								"value": "@pipeline().parameters.ContainerRootFolder",
								"type": "Expression"
							},
							"fileName": "*",
							"directoryName": "current-fileformat/fileformat"
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Get Target Metadata",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Copy Data to File Format Directory",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "rootDataSet",
						"type": "DatasetReference",
						"parameters": {
							"containerName": {
								"value": "@pipeline().parameters.ContainerRootFolder",
								"type": "Expression"
							},
							"directoryName": "uploaded-fileformat/fileformat",
							"fileName": "*"
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Filter not uploaded files",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Target Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Source Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Source Metadata').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@not(contains(activity('Get Target Metadata').output.childItems, item()))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Filter already uploaded files",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Target Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Source Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Source Metadata').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@contains(activity('Get Target Metadata').output.childItems, item())",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Append to the fileName array",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter not uploaded files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter not uploaded files').output.Value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Append name to file to be uploaded",
							"description": "",
							"type": "AppendVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "FileToBeUploaded",
								"value": {
									"value": "@item().name",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Setup folder structure",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Copy Table Schema to Blob Storage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Setup Directories",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"rootFolder": {
							"value": "@pipeline().parameters.ContainerRootFolder",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get Directory Metadata",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "List All Tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "deleteCheckDataset",
						"type": "DatasetReference",
						"parameters": {
							"containerName": {
								"value": "@pipeline().parameters.ContainerRootFolder",
								"type": "Expression"
							},
							"directoryName": "current-fileformat/schemafile"
						}
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Check Schema Directory",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Directory Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Get Directory Metadata').output.exists",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Delete Schema",
							"type": "Delete",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "rootDataSet",
									"type": "DatasetReference",
									"parameters": {
										"containerName": {
											"value": "@pipeline().parameters.ContainerRootFolder",
											"type": "Expression"
										},
										"directoryName": "current-fileformat/schemafile",
										"fileName": "*"
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"VaultURLForUsername": {
				"type": "securestring"
			},
			"VaultURLForPassword": {
				"type": "securestring"
			},
			"MaskingEngineIP": {
				"type": "string"
			},
			"LogicappURL": {
				"type": "string"
			},
			"QueryToGetTableSchema": {
				"type": "string"
			},
			"FileShareUserName": {
				"type": "securestring"
			},
			"FileSharePassword": {
				"type": "securestring"
			},
			"FileShareMountPointName": {
				"type": "string"
			},
			"FileShareUrl": {
				"type": "string"
			},
			"FileShareName": {
				"type": "string"
			},
			"ApplicationName": {
				"type": "string"
			},
			"SourceEnvironmentName": {
				"type": "string",
				"defaultValue": "SourceEnvironment"
			},
			"TargetEnvironmentName": {
				"type": "string",
				"defaultValue": "TargetEnvironment"
			},
			"SourceConnectorName": {
				"type": "string",
				"defaultValue": "SourceConnector"
			},
			"TargetConnectorName": {
				"type": "string",
				"defaultValue": "TargetConnector"
			},
			"SourceRulesetName": {
				"type": "string",
				"defaultValue": "SourceRuleset"
			},
			"TargetRulesetName": {
				"type": "string",
				"defaultValue": "TargetRuleset"
			},
			"ContainerRootFolder": {
				"type": "string"
			},
			"FileShareRootFolder": {
				"type": "string"
			}
		},
		"variables": {
			"ContentBody": {
				"type": "String"
			},
			"SanitizedString": {
				"type": "String"
			},
			"FileName": {
				"type": "String"
			},
			"PipelineId": {
				"type": "String"
			},
			"FileNamewithPipelineId": {
				"type": "String"
			},
			"FileContents": {
				"type": "String"
			},
			"DummyFile": {
				"type": "String"
			},
			"PipelineRunId": {
				"type": "String"
			},
			"FileToBeUploaded": {
				"type": "Array"
			},
			"newvar": {
				"type": "String"
			},
			"Filecontent": {
				"type": "String"
			},
			"Filenameupload": {
				"type": "String"
			},
			"abc": {
				"type": "String"
			},
			"UploadedFileformat": {
				"type": "String"
			},
			"EmptyVariable": {
				"type": "String"
			},
			"FileformatSourceContent": {
				"type": "Array"
			},
			"sourceRuleset": {
				"type": "Boolean"
			},
			"targetRuleset": {
				"type": "Boolean"
			},
			"schemaName": {
				"type": "Array"
			},
			"fileFormatContent": {
				"type": "String"
			},
			"sourceSetup": {
				"type": "Boolean"
			},
			"maskingSetupSuccess": {
				"type": "Boolean"
			},
			"Execution": {
				"type": "Boolean"
			},
			"uploadStatus": {
				"type": "String"
			},
			"targetSetup": {
				"type": "String"
			},
			"currentSchema": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Delphix Continous Compliance"
		},
		"annotations": [
			"Delphix",
			"Sensitive Data Discovery",
			"Profiling",
			"Compliance"
		],
		"lastPublishTime": "2023-02-15T05:33:10Z"
	}
}